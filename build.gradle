buildscript {
	ext {
		springBootVersion = '1.5.4.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'org.springframework.boot'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

repositories {
	mavenCentral()
}


dependencies {
	compile('org.springframework.boot:spring-boot-starter-web')
	testCompile('org.springframework.boot:spring-boot-starter-test')
}

def webappDir = "$projectDir/src/main/frontend"
def webappBuildDir = "$webappDir/dist"

sourceSets {
	main {
		resources {
			srcDirs = ["$webappBuildDir", "$projectDir/src/main/resources"]
		}
	}
}

processResources {
	dependsOn "buildFrontend"
}

task buildFrontend(type:Exec) {
	finalizedBy "copyPublicFiles"
//	dependsOn "installFrontend"
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "ng.cmd", "build"
	} else {
		commandLine "ng", "build"
	}
}

task installFrontend(type:Exec) {
	workingDir "$webappDir"
	inputs.dir "$webappDir"
	group = BasePlugin.BUILD_GROUP
	if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
		commandLine "npm.cmd", "install"
	} else {
		commandLine "npm", "install"
	}
}

task copyPublicFiles(type:Copy) {
	from "$webappBuildDir"
	into "$webappBuildDir/static"
//	exclude "**/static/**"
}